config:
  replica-replace-pattern: '%'
  show-failure-report: yes
  ignore-failure: no
  vars:
    abc: aMAINNNNNNNNNNNNNNNNNNNNNN
    def: zNNNNNNNNNNNNNNNNNNNNNN

  # Show an eta for each task on the screen (being shown on every line 
  # with a command running)
  show-task-times: true

  log-path: /tmp/demo-00.log
  env:
    __TEST1_GLOBAL: 12345

x-reference-data:
  all-apps: &app-names
    - some-lib-4
    - utilities-lib
    - important-lib
    - some-app1
    - some-app3
    - some-awesome-app-5
    - watcher-app
    - yup-another-app-7

tasks:

  - name: Process Ansible Module Command %
    tags: [t,t0,ansible]
    cmd: echo
    pre-cmd: echo
    for-each-list:
      -
        - abc
      -
        - def
        - WOW123
    ansible:
      command:
        options: 
          enabled: no
          after-command: no
          before-command: no
        args: 
          val: id
          warn: false

  - name: Process Ansible Module Command ls with args %
    tags: [t,t0,ansible]
    cmd: echo
    pre-cmd: echo
    for-each-list:
      -
        - abc
      -
        - def
        - WOW123
    ansible:
      command:
        options: 
          enabled: no
          after-command: no
          before-command: no
        args: 
          val: id
          warn: false

  - name: Process Ansible Module Command ls with args %
    tags: [t,t0,ansible]
    cmd: echo
    pre-cmd: echo
    ignore-failure: yes
    for-each-list:
      -
        - abc
      -
        - def
        - WOW123
    ansible:
      copy:
        options: 
          enabled: yes
          after-command: no
          before-command: no
        args: 
          content: WOW
          dest: /.PP
      command:
        options: 
          enabled: no
          after-command: no
          before-command: no
        args: 
          val: id
          warn: false


  - name: Process Items with Ansible Modules
    tags: [t,t0,ansible]
    cmd: echo OK
    pre-cmd: echo OK
    for-each:
      - abc
      - def
      - WOW123
    apply-each-vars:
      all: { test1: works1 }
      ALL: { test2: works2 }
      '*': { test3: works3 }
      abc: { abc: def }
      WOW123: { abc: 111111111111 }

    env:
      KEY1: VAL1
      KEY2: VAL2
  - name: test00 %
    tags: [t,t0]
    cmd: echo -e     "item=% V1={{V1}} V2={{V2}} V3={{V3}}"
    pre_cmd: echo -e "item=% V1={{V1}} V2={{V2}} V3={{V3}}"
    env:
      KEY1: VAL1
      KEY2: VAL2
    apply-each-vars:
      all: { test1: works1 }
      ALL: { test2: works2 }
      '*': { test3: works3 }
      abc: { abc: def }
      WOW123: { abc: 111111111111 }
    for-each:
      - abc
      - def
      - WOW123

  - name: test0 %
    tags: [t,t0]
    cmd: echo -e "CMD |V|{{V1}}/{{V2}}/{{V3}}|"
    stdout-log: /tmp/test0-%-stdout.log
    stderr-log: /tmp/test0-%-stderr.log
    cmd-log: /tmp/test0-%-cmd.log
    pre-cmd: echo -e "PRE abc={{abc}} test3={{test3}} item=%"
    post-cmd: echo -e "POST abc={{abc}} test3={{test3}} item=%"
    rescue-cmd: echo -e "rescue abc={{abc}} item=%"
    debug-cmd: echo -e "DEBUG pre item=%"
    debug-log: /tmp/test0-debug-%.log
    env:
      KEY1: VAL1
      KEY2: VAL2
    vars:
      V1: aaaaa
      V2: bbbbb
      V3: ccccc
    apply-each-vars:
      '*': { V1: works1 }
      def: { V2: works2 }
      WOW123: { V3: works3 }
    for-each:
      - abc
      - def
      - WOW123

  - name: test01
    tags: t01
    ignore-failure: no
    cmd-log: /tmp/test01-cmd.log
    parallel-tasks:
      - name: "Cloning %"
        cmd: echo %
        pre-cmd: echo pre %
        post-cmd: echo post %
        rescue-cmd: echo r %
        debug-cmd: echo d %
        debug-log: /tmp/d1
        ignore-failure: no
        stdout-log: /tmp/test01-%-out.log
        stderr-log: /tmp/test01-%-err.log
        cmd-log: /tmp/test01-cmd1.log
        vars:
            abc: a222222
            def: z2222222
        for-each:
          - abc
          - def

  - name: test1
    tags: t
    ignore-failure: no
    parallel-tasks:
      - name: "Cloning %"
        cmd: ls /1||date
        ignore-failure: no
        stdout-log: /tmp/test1-%-out.log
        stderr-log: /tmp/test1-%-err.log
        for-each:
          - abc
          - def

  - name: test1
    tags: t
    cmd: example/dev.sh
    ignore-failure: false
    env:
      __TEST1_AAA: 123
      __TEST1_BBB: 456

  - name: test2
    tags: t
    cmd: example/dev.sh
    ignore-failure: false
    env:
      __TEST1_CCC: xxxxxxxxxxxxxxxxxx

  - name: Cloning Repos
    collapse-on-completion: true
    parallel-tasks:
      - name: "Cloning %"
        cmd: example/scripts/random-worker.sh 1 %
        ignore-failure: true
        for-each: *app-names

  - name: Installing dependencies
    parallel-tasks:
      - name: Installing Oracle client
        cmd: example/scripts/random-worker.sh 3
      - name: Installing Google chrome
        cmd: example/scripts/random-worker.sh 4
      - name: Installing MD helper
        cmd: example/scripts/random-worker.sh 5
      - name: Installing Bridgy
        cmd: example/scripts/random-worker.sh 6

  - name: Building Base Image
    cmd: example/scripts/random-worker.sh 3

#  - name: Building Application Images
#    parallel-tasks:
#    - name: some-app1
#      cmd: example/scripts/random-worker.sh 3
#    - name: some-app3
#      cmd: example/scripts/random-worker.sh 4
#    - name: some-awesome-app-5
#      cmd: example/scripts/random-worker.sh 3
#    - name: watcher-app
#      cmd: example/scripts/random-worker.sh 2
#    - name: yup-another-app-7
#      cmd: example/scripts/random-worker.sh 2

  - name: Gathering Secrets
    cmd: example/scripts/random-worker.sh 3

  - name: Building and Migrating
    parallel-tasks:
      - name: Building app1
        cmd: example/scripts/random-worker.sh 5
      - name: Building some-app3
        cmd: example/scripts/random-worker.sh 5
      - name: Building some-lib-4
        cmd: example/scripts/random-worker.sh 6
      - name: Building some-awesome-app-5
        cmd: example/scripts/random-worker.sh 7
      - name: Building watcher-app
        cmd: example/scripts/random-worker.sh 5
      - name: Building public-6
        cmd: example/scripts/random-worker.sh 5
